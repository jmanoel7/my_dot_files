#format=pipe 
# Geany Tags file for whatever people call the C++ "Standard Template Library". 
# Some people argue whether to call it "STL", "stdlib", "standard STL", etc.
# As part of a contest for the longest STL acronym in Freenode's #C++ channel, 
# I eventually coined this completely unambiguous acronym for it:
# STC-GA-FP-MU-FDCPPP : Standard Templated Containers, Generic Algorithms, 
# Functional Programming and Miscellaneous Utilities Framework 
# for the Development of C++ Programs.
#
# @author Luis Machuca Bezzaza  <luis.machuca@gulix.cl>
# @version 2
# Nontrivial Container Constructors
vector||<T>(Iterator begin, Iterator end)|
vector||<T>(Integral count, T t0)|
deque||<T>(Iterator begin, Iterator end)|
deque||<T>(Integral count, T t0)|
list||<T>(Iterator begin, Iterator end)|
list||<T>(Integral count, T t0)|
valarray||<T>(T const* pointer, size_type length)|
# Algorithms
# ...to find and count elements
count|Integral|(Iterator begin, Iterator end, T value)|Counts ocurrences of 'value'
count_if|Integral|(Iterator begin, Iterator end, Predicate f(x)->bool)|Counts ocurrences of predicate 'f(value)' being true
find|Iterator|(Iterator begin, Iterator end, T value)|Finds an ocurrence of 'value'
find_if|Iterator|(Iterator begin, Iterator end, Predicate f(x)->bool)|Finds an ocurrence of predicate 'f(value)' being true
find_end|FwIter|(FwIter begin, FwIter end, SrcIter seq_begin, SrcIter seq_end)|Finds last ocurrence of subsequence
find_end|FwIter|(FwIter begin, FwIter end, SrcIter seq_begin, SrcIter seq_end, Compare f(a,b))|Finds last ocurrence of subsequence
adjacent_find|FwIter|(FwIter begin, FwIter end, Compare f(a,b) = std::equal<T>() );
binary_search|bool|(Iterator begin, Iterator end, T value, Predicate less(x,y)->bool)|Finds 'value' in a sorted sequence
search|FwIter|(FwIter begin, FwIter end, SubseqIter seq_begin, SubseqIter seq_end)|Searches instance of a subsequence
search|FwIter|(FwIter begin, FwIter end, SubseqIter seq_begin, SubseqIter seq_end, Compare f(a,b)->bool)|Searches instance of a subsequence
search_n|FwIter|(FwIter begin, FwIter end, Integer n, T const& value)|
search_n|FwIter|(FwIter begin, FwIter end, Integer n, Compare equal(a,b))|
# ...to query a sequence
min_element|Iterator|(Iterator begin, Iterator end, Predicate less(x,y)->bool)|
max_element|Iterator|(Iterator begin, Iterator end, Predicate less(x,y)->bool)|
minmax_element|pair<Iterator,Iterator>|(Iterator begin, Iterator end, Predicate less(x,y)->bool)|
is_sorted|bool|(Iterator begin, Iterator end, Predicate less(x,y)->bool)|
all_of|bool|(Iterator begin, Iterator end, Predicate f(x)->bool)|
none_of|bool|(Iterator begin, Iterator end, Predicate f(x)->bool)|
any_of|bool|(Iterator begin, Iterator end, Predicate f(x)->bool)|
includes|bool|(Iterator1 begin, Iterator1 end, Iterator2 subset_begin, Iterator2 subset_end, Predicate less(x,y)->bool)|
# ...to copy/move elements
copy|OutputIterator|(Iterator begin, Iterator end, OutputIterator target)|
copy_if|OutputIterator|(Iterator begin, Iterator end, OutputIterator target, Predicate f(x)->bool)|
copy_n|OutputIterator|(Iterator begin, Integral n, OutputIterator target)|
copy_backward|OutputIterator|(Iterator begin, Iterator end, OutputIterator target_end)|
move|OutputIterator|(Iterator begin, Iterator end, OutputIterator target)|Move elements in a sequence
move_backward|OutputBidiIterator|(BidiIterator begin, BidiIterator end, OutputBidiIterator target_end)|
partition_copy|pair<OIter1,OIter2>|(Iterator begin, Iterator end, OIter1 true_dest, OIter2 false_dest, Predicate f(x)->bool)|
remove|FwIt|(FwIt begin, FwIt end, T const& value)|"Removes" 'value' elements and returns new end marker for .erase
remove_copy|OutputIt|(InputIt begin, InputIt end, OutputIt target, T const& value)|
remove_if|FwIt|(FwIt begin, FwIt end, Predicate p)|"Removes" 'value' elements and returns new end marker for .erase
remove_copy_if|OutputIt|(InputIt begin, InputIt end, OutputIt target, Predicate p)|
# ...to fill to a sequence
fill|void|(OutputIterator begin, OutputIterator end, value)|Fills sequence with 'value'
fill_n|void|(OutputIterator begin, Integral n, value)|Fills 'n' positions with 'value'
generate|void|(OutputIterator begin, OutputIterator end, Generator g()->T)|Fills sequence with value calls to 'g()'
generate_n|void|(OutputIterator begin, Integral n, Generator g()->T)|Fills 'n' positions with value calls to 'g()'
# ...to modify a sequence
for_each|Unary|(InputIt begin, InputIt end, Unary f )|
transform|OIterator|(SrcIterator begin, SrcIterator end, OIterator output, Transformation f(x)->y)|
transform|OIterator|(SrcIterator xbegin, SrcIterator xend, YIterator ybegin, OIterator output, Callable f(x,y)->OIterator::value_type)|
# ...to reorder
reverse|void|(Iterator begin, Iterator end)|
reverse_copy|DestIter|(FwIter begin, FwIter end, DestIter target)|
rotate|FwIter[c++11]|(FwIter begin, FwIter new_begin, FwIter last)|
rotate|void[c++03]|(FwIter begin, FwIter new_begin, FwIter last)|
rotate_copy|DestIter|(FwIter begin, FwIter new_begin, FwIter last, DestIter target)|
unique|Iterator[new_end]|(Iterator begin, Iterator end, Compare = std::equal<T>)|
unique_copy|DestIterator[new_end]|(Iterator begin, Iterator end, DestIterator target, Compare = std::equal<T>)|
sort|void|(Iterator begin, Iterator end, Predicate less(x,y)->bool)|
partial_sort|void|(Iterator begin, Iterator end, Compare = Predicate less(x,y)->bool)|
stable_sort|void|(Iterator begin, Iterator pivot, Iterator end, Predicate less(x,y)->bool)|
#next_permutation (PENDING)
#prev_permutation (PENDING)
#random_shuffle (PENDING)
# ...to find or compare a subsequence
equal|bool|(Iterator1 begin1, Iterator1 end1, Iterator2 begin2)|
equal|bool|(Iterator1 begin1, Iterator1 end1, Iterator2 begin2, Compare f(a,b))|Returns true if both sequences are identical
equal|bool|(Iterator1 begin, Iterator1 end1, Iterator2 begin2, Iterator2 end2)|
equal|bool|(Iterator1 begin, Iterator1 end1, Iterator2 begin2, Iterator2 end2, Compare f(a,b))|
mismatch|pair<Iterator1,Iterator2>|(Iterator1 begin1, Iterator1 end1)|Finds the positions where two sequences differ.
mismatch|pair<Iterator1,Iterator2>|(Iterator1 begin1, Iterator1 end1, Iterator2 begin2, Compare = std::equal_to<T>)|Finds the positions where two sequences differ.
mismatch|pair<Iterator1,Iterator2>|(Iterator1 begin1, Iterator1 end1, Iterator2 begin2, Iterator2 end2, Compare = std::equal_to<T>)|Finds the positions where two sequences differ.
#search (PENDING)
#search_end (PENDING)
# ...to create sets (PENDING)
# ...to create heaps (PENDING)
# ...for numericals
accumulate|Numeric|(Iterator begin, Iterator end, Numeric v0)|Folds a sequence
accumulate|T|(Iterator begin, Iterator end, T v0, LeftAccumulator f(s,xn)->s)|Folds a sequence
adjacent_difference|OIterator[seq_of_differences]|(Iterator begin, Iterator end, OIterator target, Operator diff(x,y)->T)|
inner_product|Numeric|(Iterator1 begin1, Iterator1 end1, Iterator2 begin2, Numeric v0)|
inner_product|T|(Iterator1 begin1, Iterator1 end1, Iterator2 begin2, T v0, Operator sum(T,T)->T, Operator product(T,T)->T )|
iota|void|(Iterator begin, Iterator end, T value )|Fills a sequence incrementally
partial_sum|OIterator[seq_of_sums]|(Iterator begin, Iterator end, OIterator target)|
partial_sum|OIterator[seq_of_sums]|(Iterator begin, Iterator end, OIterator target, Operator sum(x,y)->T)|
# Functional utilities (from <functional>)
ref|reference_wrapper<T>|(T &object)|Wraps a reference to an object
cref|reference_wrapper<T const>|(T const &object)|Wraps a reference to an object
ptr_fun|pointer_to_unary_function<Arg,R>|(R(*function)(Arg))|
ptr_fun|pointer_to_binary_function<Arg1,Arg2,R>|(R(*function)(Arg1,Arg2))|
mem_fn|[function object]|(&Class::funtion_pointer)|Wraps a member function as a function-like object
bind|[function object]|(list of {argument or _placeholder})|
function|function<fn_prototype>|(function pointer or functoid)|Wraps a function as a function-like object
is_placeholder|bool|(argument or _placeholder)|
# Iterator utilities (from <iterator>)
advance|void|(Iterator& p, difference_type n)|Advances an iterator
distance|difference_type|(Iterator p1, Iterator p2)|Calculates distance between two iterators
begin|iterator type|(Range r[begin,end) )|Begin of a sequence
end|iterator type|(Range r[begin,end] )|End of a sequence
cbegin|const_iterator type|(Range r[begin,end) )|
cend|const_iterator type|(Range r[begin,end) )|
next|Iterator|(Iterator p, difference_type n)|Moves forwards from an iterator
prev|Iterator|(Iterator p, difference_type n)|Moves backwards from an iterator
# Memory (from <memory>)
make_shared|shared_ptr<Type>|(Type_ctor_arguments&&...)|
allocate_shared|shared_ptr<Type>|(Allocator const& alloc, Type_ctor_arguments&&...)|
get_deleter|Deleter type*|(shared_ptr<T> const&)|Provides access to a managed resource's deleter
uninitialized_copy|MemoryIter|(InputIter begin, InputIter end, MemoryIter begin_uninitialized )|
uninitialized_copy_n|MemoryIter|(InputIter begin, Integral n, MemoryIter begin_uninitialized )|
uninitialized_fill|void|(MemoryIter begin, MemoryIter end, T const& value )|
uninitialized_fill_n|void|(MemoryIter begin, Integral n, T const& value )|
get_temporary_buffer|pair< T*, ptrdiff_t >|( std::ptrdiff_t count )|
return_temporary_buffer|void|(T*)|
# Math (from <cmath>, <ccomplex> and others) (PENDING)
# RNG (from <random>) (PENDING)
# IOstreams and I/O manipulation (from <ios>, <iomanip>, etc)
setbase|(streamable)|(int = {8, 10, 16})|
setfill|(streamable)|(stream_char = ' ')|
setprecision|(streamable)|(int precision)|
setw|(streamable)|(int field_width = 0)|
setiosflags|(streamable)|( std::ios_base::fmtflags )|
resetiosflags|(streamable)|( std::ios_base::fmtflags )|
get_time|(in-streamable)|(tm* storage, stream_char* format)|Reads POSIX-formatted time/date.
put_time|(out-streamable)|(tm const* storage, stream_char* format)|Writes POSIX-formatted time/date.
# Regular Expression Matching (from <regex>) (PENDING)
# Various other utilities
swap|void|(T& ta, T& tb)|Swaps two values
addressof|T*|(T &object)|Finds the address in memory of an object
exchange|T|(T& obj, T&& new_value)|
make_pair|pair<A,B>|(A a, B b)|Wraps two objects in a pair
make_tuple|tuple<T0,T1,...>|(T0 a0, T1 a1, ...)|Wraps various objects in a tuple
tie|tuple<A0&,A1&,...>|(tuple<A0,A1,...>)|Ties a tuple into references to objects
get<k>|A_k|(tuple<A0,...,A_k,...>)|Gets the 'k'th element of a tuple
get|A_k|(tuple<A0,...,A_k,...>)|Gets the 'k'th element of a tuple
move|referenceless(T)&&|(T&& to_be_moved)|Turns a variable into a rvalue-reference
forward|T&&|(referenceless(T)& to_be_forwarded)|
declval<T>|T&&|()|Obtains a reference in unevaluated context
#Pending features proposed
#make_array
#make_unique
